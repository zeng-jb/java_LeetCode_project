## 二分

这是一道「二分查找」的裸题。

「二分」有一个比较容易混淆的点是：当需要找目标值第一次出现的下标时，条件应该写成 `nums[mid] >= target` 还是 `nums[mid] <= target`。

其实有一个很好理解的方法：

**由于二分是从中间开始找起的，所以找的必然是条件区间中靠近中心的的边界值。**

文字不好理解，我们结合图片来看：

![](https://pic.leetcode-cn.com/1611730934-iKurnj-640.png)

代码：

* []

```Java
class Solution {
    public int search(int[] nums, int t) {
        int a = 0, b = 0, n = nums.length;
        if (n == 0) return 0;
        int l = 0, r = n - 1;
        while (l < r) {
            int mid = l + r >> 1;
            if (nums[mid] >= t) r = mid;
            else l = mid + 1;
        }
        if (nums[r] != t) return 0;
        a = r;
        l = 0; r = n - 1;
        while (l < r) {
            int mid = l + r + 1 >> 1;
            if (nums[mid] <= t) l = mid;
            else r = mid - 1;
        }
        b = r;
        return b - a + 1;
    }
}
```

* []

```Typescript
function search(nums: number[], t: number): number {
    let a = 0, b = 0, n = nums.length
    if (n == 0) return 0
    let l = 0, r = n - 1
    while (l < r) {
        const mid = l + r >> 1
        if (nums[mid] >= t) r = mid
        else l = mid + 1
    }
    if (nums[r] != t) return 0
    a = r
    l = 0; r = n - 1
    while (l < r) {
        const mid = l + r + 1 >> 1
        if (nums[mid] <= t) l = mid
        else r = mid - 1
    }
    b = r
    return b - a + 1
};
```

* 时间复杂度：$O(\log{n})$
* 空间复杂度：$O(1)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
